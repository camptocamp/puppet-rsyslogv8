  port="<%= @action.fetch("port", 2514) %>"
<%if @action.fetch('template', nil) and @action['template'] != :undef -%>
<%  raise Puppet::ParseError, "template parameter must be a String in action #{@action.fetch('name', @title)}" unless @action['template'].is_a?(String) -%>
  template="<%= @action['template'] %>"
<%end -%>
<%raise Puppet::ParseError, "target is not set for action #{@action.fetch('target', @title)}" unless @action.fetch('target', nil) -%>
  target="<%= @action['target'] %>"
<%
  # Black magic to set correctly the SSL options of rsyslog with local options overriding global options

  # Choose if we want to enable SSL
  if @action.fetch('ssl', nil) != nil and @action['ssl'] != :undef
    # if overridden locally, chose local option
    __ssl = @action['ssl']
    if scope.lookupvar('::osfamily') == 'RedHat' and ( scope.lookupvar('::operatingsystemmajrelease') == '5' or scope.lookupvar('::operatingsystemmajrelease') == '6')
      scope.function_notice(["TLS with relp might not work in #{scope.lookupvar('::operatingsystem')}#{scope.lookupvar('::operatingsystemmajrelease')} due to an old version of gnutls"])
    end
  else
    # if not overridden locally, choose global parameter
    __ssl = scope.lookupvar('::rsyslogv8::ssl')
  end
  if __ssl
    # we want ssl
    # get correct certificate
    __my_cert = @action.fetch('ssl_cert', nil)
    if __my_cert == nil or __my_cert == :undef
      __my_cert = scope.lookupvar('::rsyslogv8::ssl_cert')
    end
    __my_ca = @action.fetch('ssl_ca', nil)
    if __my_ca == nil or __my_ca == :undef
      __my_ca = scope.lookupvar('::rsyslogv8::ssl_ca')
    end
    __my_key = @action.fetch('ssl_key', nil)
    if __my_key == nil or __my_key == :undef
      __my_key = scope.lookupvar('::rsyslogv8::ssl_key')
    end
-%>
  tls="on"
<% if __my_cert and __my_cert != :undef -%>
  tls.myCert="<%= __my_cert %>"
<% end -%>
<% if __my_ca and __my_ca != :undef -%>
  tls.caCert="<%= __my_ca %>"
<% end -%>
<% if __my_key and __my_key != :undef -%>
  tls.myPrivKey="<%= __my_key %>"
<% end -%>
<%
   if @action.fetch('auth', nil) == 'x509/name'
      raise Puppet::ParseError, "when authentication by name is selected authorised_peers must be set in action #{@action.fetch('name', @title)}" unless @action.fetch('authorised_peers', nil)
      raise Puppet::ParseError, "authorised_peers must be a String or an Array in action #{@action.fetch('name', @title)}" unless @action['authorised_peers'].is_a?(String) or @action['authorised_peers'].is_a?(Array)
-%>
  tls.authMode="name"
  tls.permittedPeer=<%
      if @action['authorised_peers'].is_a? Array
-%>
[
<%      @action['authorised_peers'].each_index do |i| -%>
  "<%=    @action['authorised_peers'][i] %>"<% if i < (@action['authorised_peers'].length - 1) %>,<% end %>
<%      end -%>
  ]
<%    else -%>
"<%=@action['authorised_peers'] %>"
<%    end -%>
<%  elsif @action.fetch('auth', nil) == 'anon' or @action.fetch('auth', nil) == nil or @action.fetch('auth', nil) == :undef
    else # unknown auth mode
      raise Puppet::ParseError, "unknown auth mode #{@action['auth']} for action #{@action.fetch('name', @title)}"
    end
  else -%>
  tls="off"
<%end -%>
